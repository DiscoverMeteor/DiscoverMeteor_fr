---
title: Créer des Posts
slug: creating-posts
date: 0007/01/01
number: 7
contents: Apprendre à envoyer un post côté client.|Implémenter un contrôle de sécurité simple.|Restreindre l’accès au formulaire d’envoi du post.|Apprendre à utiliser les méthodes côté serveur pour améliorer la sécurité.
paragraphs: 60
---

Nous avons vu qu’il était facile de créer des posts via la console en utilisant l’appel à la base de données `Posts.insert`, mais nous ne pouvons pas attendre des utilisateurs qu’ils ouvrent la console pour créer un nouveau post.

En fin de compte, nous aurons besoin de construire une sorte d'interface utilisateur pour permettre à nos utilisateurs d’envoyer de nouvelles histoires à notre application.

### Construire la nouvelle page d'envoi

Nous commençons par définir une route pour notre nouvelle page :

~~~js
Router.configure({
  layoutTemplate: 'layout',
  loadingTemplate: 'loading',
  waitOn: function() { return Meteor.subscribe('posts'); }
});

Router.map(function() {
  this.route('postsList', {path: '/'});
  
  this.route('postPage', {
    path: '/posts/:_id',
    data: function() { return Posts.findOne(this.params._id); }
  });
  
  this.route('postSubmit', {
    path: '/submit'
  });
});
~~~
<%= caption "lib/router.js" %>
<%= highlight "13~15" %>

Nous utilisons la fonction `data` du Router pour définir le contexte des données du template `postPage`. Rappelez-vous que tout ce que nous mettons dans le contexte de données sera disponible en tant que `this` dans les Helpers du template.

### Ajouter un lien dans l’entête

La route étant définie, nous pouvons désormais ajouter un lien vers notre page d’envoi dans l’entête :

~~~html
<template name="header">
  <header class="navbar">
    <div class="navbar-inner">
      <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </a>
      <a class="brand" href="{{pathFor 'postsList'}}">Microscope</a>
      <div class="nav-collapse collapse">
        <ul class="nav">
          <li><a href="{{pathFor 'postSubmit'}}">New</a></li>
        </ul>
        <ul class="nav pull-right">
          <li>{{> loginButtons}}</li>
        </ul>
      </div>
    </div>
  </header>
</template>
~~~
<%= caption "client/views/includes/header.html" %>
<%= highlight "11~13" %>

Configurer notre route signifie que si un utilisateur accède à l’URL `/submit`, Meteor affichera le template `postSubmit`. Nous allons donc écrire ce template :

~~~html
<template name="postSubmit">
  <form class="main">
    <div class="control-group">
        <label class="control-label" for="url">URL</label>
        <div class="controls">
            <input name="url" type="text" value="" placeholder="Your URL"/>
        </div>
    </div>

    <div class="control-group">
        <label class="control-label" for="title">Title</label>
        <div class="controls">
            <input name="title" type="text" value="" placeholder="Name your post"/>
        </div>
    </div>

    <div class="control-group">
        <label class="control-label" for="message">Message</label>
        <div class="controls">
            <textarea name="message" type="text" value=""/>
        </div>
    </div> 

    <div class="control-group">
        <div class="controls">
            <input type="submit" value="Submit" class="btn btn-primary"/>
        </div>
    </div>
  </form>
</template>

~~~
<%= caption "client/views/posts/post_submit.html" %>

Remarque : ici nous avons beaucoup de balises, mais cela vient simplement de l’utilisation de Twitter Bootstrap. Bien que seuls les éléments de formulaire sont essentielles, les balises supplémentaires nous aiderons à rendre notre application plus agréable à regarder. Elle devrait désormais ressembler à cela :

<%= screenshot "7-1", "Le formulaire d'envoi de Post" %>

C’est un formulaire simple. Nous n’avons pas à nous soucier de définir une action pour celui-ci puisque que nous intercepterons l’événement `submit` et que nous mettrons à jour les données via JavaScript. (Il n’est pas logique de fournir une solution de secours non-JS si nous considérons que Meteor ne fonctionne pas lorsque JavaScript est désactivé).

### Créer des Posts

Nous allons lier un gestionnaire d'événements à l'événement `submit` de notre formulaire. Il est préférable d'utiliser l'événement `submit` (plutôt qu'un événement `click` sur le bouton), ce qui englobera toutes les moyens de soumission du formulaire (comme par exemple appuyer sur la touche entrée tout en étant dans le champ de saisie de l'URL).

~~~js
Template.postSubmit.events({
  'submit form': function(e) {
    e.preventDefault();
    
    var post = {
      url: $(e.target).find('[name=url]').val(),
      title: $(e.target).find('[name=title]').val(),
      message: $(e.target).find('[name=message]').val()
    }
    
    post._id = Posts.insert(post);
    Router.go('postPage', post);
  }
});
~~~
<%= caption "client/views/posts/post_submit.js" %>

<%= commit "7-1", "Ajouter une page d'envoi du Post et le lien correspondant dans l'entête." %>

Cette fonction utilise [jQuery](http://jquery.com) pour récupérer les valeurs de nos différents champs de saisie, et remplir un nouvel objet Post avec celles-ci. Il nous est nécessaire d’utiliser `preventDefault` sur l’argument `e` qui est l’événement pour être sûr que le navigateur ne nous précède pas et n’essaie pas d’envoyer le formulaire.

Pour finir, nous pouvons rediriger vers la page du nouveau post. La fonction `insert()` de la collection nous retourne l’`id` généré pour l’objet qui a été inséré dans notre base de données, qui sera utilisé par la fonction `go()` du Router pour construire l’URL de redirection.

Le résultat est que l’utilisateur appuie sur `Submit`, un post est créé, et l’utilisateur est immédiatement redirigé vers la page de discussion de ce nouveau post.

### Ajouter un peu de sécurité

Créer des posts c’est très bien, mais nous ne souhaitons pas que n'importe quel visiteur puisse le faire : nous voulons que l’utilisateur soit authentifié pour le faire. Bien sûr, nous pouvons commencer par cacher le formulaire d’envoi pour les utilisateurs non connectés. Pourtant, un utilisateur pourrait éventuellement créer un post dans la console du navigateur sans être authentifié, et nous ne pouvons pas accepter cela.

Heureusement, Meteor gère la sécurité des collections de manière adéquate; c’est juste que cela est désactivé par défaut lorsque vous créez un nouveau projet. Cela vous permet de démarrer facilement et de construire une application tout en gardant les choses ennuyantes pour plus tard.

Notre application n’a donc plus besoin de tout cela ! Nous allons supprimer le package `insecure` :

~~~bash
$ meteor remove insecure
~~~
<%= caption "Terminal" %>

Après l'avoir fait, vous remarquerez que le formulaire d’envoi de post ne fonctionne plus. En effet, sans le package `insecure`, les insertions de post côté client _ne sont plus autorisées_. Désormais nous avons deux options, soit écrire des règles explicites pour dire à Meteor quels utilisateurs peuvent insérer des posts ou bien réaliser les insertions côté serveur.

### Permettre l'insertion des Posts

Pour commencer, nous allons vous montrer comment autoriser l’insertion des posts côté client afin d’obtenir à nouveau un formulaire fonctionnel. Il s’avère que nous utiliserons une technique différente à la fin, mais pour le moment, ce qui suit nous permettra de le refaire fonctionner assez facilement :

~~~js
Posts = new Meteor.Collection('posts');

Posts.allow({
  insert: function(userId, doc) {
    // only allow posting if you are logged in
    return !! userId;
  }
});
~~~
<%= caption "collections/posts.js" %>
<%= highlight "3~8" %>

<%= commit "7-2", "Supprimer insecure, et permettre certains ajouts de posts." %>

Nous appelons `Posts.allow`, qui dit à Meteor « cela est un ensemble de circonstances dans lesquelles les clients sont autorisés à faire des choses sur la collection `Posts` ». Dans ce cas, nous disons « les clients sont autorisés à insérer des posts tant qu’ils ont un `userId` ».

L’`userId` de l’utilisateur faisant la modification est passé dans les appels de `allow` et `deny` (ou retourne `null` si l’utilisateur n’est pas connecté), ce qui est très souvent utile. Et comme les comptes utilisateurs sont liés au noyau de Meteor, nous pouvons être sûr que l’`userId` soit toujours correcte.

Nous avons réussi à faire en sorte que vous devez être connecté pour créer un post. Essayez de vous déconnecter et de créer un post; vous devriez voir ceci dans votre console :

<%= screenshot "7-2", "Echec de l'insertion : accès refusé" %>

Toutefois, nous avons à faire face à quelques problèmes :

 - Les utilisateurs déconnectés peuvent encore accèder au formulaire de création de post.
 - Le post n'est pas lié à l'utilisateur (et il n'y a pas de code sur le serveur qui impose cela).
 - Des posts qui pointent vers la même URL peuvent être créés.

Réglons ces problèmes.

### Sécuriser l'accès au nouveau formulaire

Nous allons commencer par empêcher les utilisateurs non connectés de voir le formulaire d'envoi de post. Nous le ferons au niveau du router, en définissant une *action (hook) du router*.

Une action (hook) intercepte le processus de routage et modifie l'action que le router prend. Vous pouvez penser que c'est un agent de sécurité qui contrôle vos informations d'identification avant de vous laisser entrer (ou de vous renvoyer).

Il nous faut vérifier si l'utilisateur est connecté, et s'il ne l'est pas rendre le template `accessDenied` à la place du template `postSubmit` (puis nous indiquerons au router de rien faire de plus). Donc, nous allons modifier router.js comme ci-dessous :

~~~js
Router.configure({
  layoutTemplate: 'layout',
  loadingTemplate: 'loading',
  waitOn: function() { return Meteor.subscribe('posts'); }
});

Router.map(function() {
  this.route('postsList', {path: '/'});
  
  this.route('postPage', {
    path: '/posts/:_id',
    data: function() { return Posts.findOne(this.params._id); }
  });
  
  this.route('postSubmit', {
    path: '/submit'
  });
});


var requireLogin = function(pause) {
  if (! Meteor.user()) {
    this.render('accessDenied');
    pause();
  }
}

Router.onBeforeAction('loading');
Router.onBeforeAction(requireLogin, {only: 'postSubmit'});
~~~
<%= caption "lib/router.js" %>
<%= highlight "19~26,29" %>

Nous créons aussi le template pour la page d'accès refusé :

~~~html
<template name="accessDenied">
  <div class="alert alert-error">You can't get here! Please log in.</div>
</template>
~~~
<%= caption "client/views/includes/access_denied.html" %>

<%= commit "7-3", "Accès refusé à l'envoi de posts aux utilisateurs non connectés." %>

Si vous allez maintenant sur http://localhost:3000/submit/ sans être connecté, vous devriez voir cela :

<%= screenshot "7-3", "Template d'accès refusé" %>

Ce qui est agréable au niveau des actions (hooks) de routage c'est qu'elles sont _réactives_. Cela signifie que nous pouvons être déclaratif et nous n'avons pas besoin de penser aux fonctions de rappels (callbacks), ou autre, quand l'utilisateur se connecte. Quand l'état de la connection de l'utilisateur change, le template de la page change immédiatement de `accessDenied` à `postSubmit` sans que nous ayons à écrire de code pour le gérer.

Connectez-vous, puis essayez de rafraîchir la page. Vous pouvez parfois voir le template d'accès refusé s'afficher un court instant avant que la page d'envoi de post apparaisse. La raison à cela est que Meteor commence à rendre les templates dès que possible, avant même qu'il ait interrogé le serveur et qu'il ait vérifié si l'utilisateur courant (stocké dans le local storage du navigateur) existe encore.

Pour éviter ce problème (qui est un des plus courants que vous pourrez rencontrer quand vous traiterez des subtilités de la latence entre le client et le serveur), nous allons juste afficher un écran de chargement pendant le bref moment où nous attendons de savoir si l'utilisateur a l'accès ou non.

Après tout, à cette étape nous ne savons pas si l'utilisateur possède des informations d'identification correctes, et ne nous pouvons pas afficher le template `accessDenied` ou le template `postSubmit` tant que nous ne le savons pas.

Donc, nous modifions notre action (hook) pour utiliser notre template de chargement tant que `Meteor.loggingIn()` est vrai :

~~~js
Router.map(function() {
  this.route('postsList', {path: '/'});
  
  this.route('postPage', {
    path: '/posts/:_id',
    data: function() { return Posts.findOne(this.params._id); }
  });
  
  this.route('postSubmit', {
    path: '/submit'
  });
});


var requireLogin = function(pause) {
  if (! Meteor.user()) {
    if (Meteor.loggingIn())
      this.render(this.loadingTemplate);
    else
      this.render('accessDenied');
    
    pause();
  }
}

Router.onBeforeAction('loading');
Router.onBeforeAction(requireLogin, {only: 'postSubmit'});
~~~
<%= caption "lib/router.js" %>
<%= highlight "16~19" %>

<%= commit "7-4", "Afficher un écran de chargement en attendant l'authentification." %>

### Cacher le lien

Le moyen le plus simple d'éviter que les utilisateurs essaient d'atteindre cette page quand ils sont déconnectés est de cacher le lien. Nous pouvons réaliser cela très facilement :

~~~html
<ul class="nav">
  {{#if currentUser}}<li><a href="{{pathFor 'postSubmit'}}">Submit Post</a></li>{{/if}}
</ul>
~~~
<%= caption "client/views/includes/header.html" %>

<%= commit "7-5", "Affiche le lien de la page d'envoi de post seulement si l'utilisateur est authentifié." %>

L'helper `currentUser` nous est fourni par le package `accounts` qui est l'équivalent de `Meteor.User()` dans les Spacebars. Puisque c'est réactif, le lien apparaîtra ou disparaîtra selon l'état de connexion de l'utilisateur.

### Method Meteor : meilleures abstraction et sécurité

Nous avons réussi à sécuriser l'accès à la nouvelle page de post pour les utilisateurs déconnectés, et à interdire à ces utilisateurs de créer des posts même s'ils trichent et qu'ils utilisent la console. Pourtant, il y a encore des choses dont nous devons nous occuper :

- Horodatage des messages
- S'assurer qu'une URL peut être envoyée une seule fois
- Ajouter les détails sur l'auteur du post (ID, nom d'utilisateur, etc.).

Vous pouvez penser que nous pouvons faire tout cela dans le gestionnaire d'évènement `submit`. Cependant, en le faisant ainsi, nous rencontrerons de nombreux problèmes.

- Pour le timestamp, nous aurions à nous assurer que le temps de l'ordinateur de l'utilisateur soit correct, ce qui n'est pas toujours le cas.
- Les clients ne connaîtrons pas _toutes_ les URL déjà mises sur le site. Ils ne connaîtrons que les messages qu'ils peuvent voir actuellement (nous verrons exactement comment cela fonctionnera plus tard), il n'y a donc aucun moyen de mettre en place l'unicité de l'URL côté client.
- Enfin, bien que nous _pouvons_ ajouter les détails sur l'utilisateur côté client, nous ne pourrons pas certifier son exactitude, ce qui pourrait soumettre notre application à l'exploitation par des personnes utilisant la console de leur navigateur.

Pour toutes ces raisons, c'est préférable de garder notre gestionnaire d'événement simple et, si nous faisons plus que des simples insertions ou mises à jour dans nos collections, d'utiliser une **Method**.

Une Method Meteor est une fonction côté serveur qui est appelée côté client. Cela ne nous est pas complètement inconnu -- en fait, dans les coulisses, les fonctions `insert`, `update` et `remove` de `Collection` sont toutes des Methods. Nous allons voir comment créer nos propres Methods. 

Revenons à `post_submit.js`. Plutôt que d'insérer directement dans le collection `Posts`, nous allons appeler une Method nommée `post` :

~~~js
Template.postSubmit.events({
  'submit form': function(e) {
    e.preventDefault();
    
    var post = {
      url: $(e.target).find('[name=url]').val(),
      title: $(e.target).find('[name=title]').val(),
      message: $(e.target).find('[name=message]').val()
    }
    
    Meteor.call('post', post, function(error, id) {
      if (error)
        return alert(error.reason);
        
      Router.go('postPage', {_id: id});
    });
  }
});
~~~
<%= caption "client/views/posts/post_submit.js" %>

La fonction `Meteor.call` appelle une Method nommée par son premier argument. Vous pouvez fournir des arguments à l'appel (dans ce cas, l'objet `post` que nous avons construit dans le formulaire), et enfin attacher une fonction de rappel, qui sera exécutée quand la Method côté server sera effectuée. Ici nous alertons simplement l'utilisateur s'il y a un problème, sinon nous redirigeons l'utilisateur vers la page de discussion nouvellement créée.

Ensuite, nous définissions la Method dans notre fichier `collections/posts.js`. Nous supprimerons le bloc `allow()` de `post.js` puisque les Methods Meteor les contournent de toute façon. Rappelez-vous que les Methods sont exécutées sur le serveur, donc Meteor suppose qu'il peut leurs faire confiance.

~~~js
Posts = new Meteor.Collection('posts');

Meteor.methods({
  post: function(postAttributes) {
    var user = Meteor.user(),
      postWithSameLink = Posts.findOne({url: postAttributes.url});
    
    // ensure the user is logged in
    if (!user)
      throw new Meteor.Error(401, "You need to login to post new stories");
    
    // ensure the post has a title
    if (!postAttributes.title)
      throw new Meteor.Error(422, 'Please fill in a headline');
    
    // check that there are no previous posts with the same link
    if (postAttributes.url && postWithSameLink) {
      throw new Meteor.Error(302, 
        'This link has already been posted', 
        postWithSameLink._id);
    }
    
    // pick out the whitelisted keys
    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {
      userId: user._id, 
      author: user.username, 
      submitted: new Date().getTime()
    });
    
    var postId = Posts.insert(post);
    
    return postId;
  }
});
~~~
<%= caption "collections/posts.js" %>

<%= commit "7-6", "Utiliser une Method pour envoyer le post." %>

Cette Method est un peu compliquée, mais j'espère que vous pouvez suivre.

Premièrement, nous définissons notre variable `user` et contrôlons si un post avec la même URL existe déjà. Ensuite, nous contrôlons si l'utilisateur est connecté, en montrant une `alert` dans le cas contraire. De plus, nous faisons une validation de l'objet post pour être sûr que nos posts ont des titres.

Ensuite, s'il y a un autre post avec la même URL, nous lançons une erreur `302` (redirect) indiquant à l'utilisateur qu'il doit aller voir le post déjà créé.

La classe `Error` de Meteor prend trois arguments. Le premier (`error`) sera le code numérique `302`, le second (`reason`) est une brève explication de l'erreur, et le dernier (`details`) peut être des informations complémentaires.

Dans notre cas, nous allons utiliser le troisième argument pour passer l'ID du post que nous avons trouvé que nous utiliserons plus tard pour rediriger l'utilisateur vers le post existant.

Si tous ces contrôles sont passés, nous récupérons les champs que nous souhaitons insérer (garantissant qu'un utilisateur qui appelle cette Method depuis la console du navigateur ne puisse pas mettre de données erronées dans notre base de données), et incluons quelques informations sur l'utilisateur envoyant le post -- ainsi que l'heure actuelle -- dans le post. 

Pour finir, nous insérons le post, et retournons l'`id` du nouveau post à l'utilisateur.

### Sorting Posts

Maintenant que nous avons une date d'envoi sur tous nos posts, il est judicieux de veiller à ce qu'ils soient triés à l'aide de cet attribut. Pour le faire, nous pouvons juste utiliser l'opérateur `sort` de Mongo, qui attend un objet constitué des clés de tri, et un signe indiquant si elles sont ascendantes ou descendantes.

~~~js
Template.postsList.helpers({
  posts: function() {
    return Posts.find({}, {sort: {submitted: -1}});
  }
});
~~~
<%= caption "client/views/posts/posts_list.js" %>
<%= highlight "3" %>

<%= commit "7-7", "Trier les posts par date d'envoi." %>

Il a fallu un peu de travail, mais au final nous avons une interface utilisateur qui permet aux utilisateurs de saisir en toute sécurité du contenu dans notre application !

Mais n'importe quelle application qui permet aux utilisateurs de créer du contenu doit également leur donner un moyen de le modifier ou le supprimer. C'est ce dont le chapitre Edition de Posts traitera.