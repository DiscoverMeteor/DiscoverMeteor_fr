---
title: Déploiement
slug: deploying
date: 0002/01/02
number: 2.5
sidebar: true
contents: Apprendre à déployer sur Meteor.com.|Apprendre à déployer sur Modulus.|Apprendre à déployer sur son propre serveur avec Meteor Up.
paragraphs: 46
---

Certaines personnes aiment travailler posément à un projet jusqu'à sa perfection, alors que d'autres souhaitent le dévoiler aussitôt que possible.

Si vous vous reconnaissez dans la première attitude et que vous préférez travailler localement pour l'instant, n'hésitez pas à sauter ce chapitre. En revanche, si vous êtes disposé·e à prendre le temps de découvrir comment mettre en ligne votre application Meteor, ce chapitre vous est destiné.

Nous allons examiner différentes façons de déployer Meteor. Vous pourrez utiliser l'une ou l'autre à chaque étape de votre processus de développement, que ce soit pour Microscope ou tout autre application Meteor. C'est parti!

<% note do %>

### Présentation des _apartés_
  
Ce chapitre est un _aparté_, qui approfondit un sujet plus général de Meteor, indépendamment du reste de l'ouvrage.
  
Si vous préférez poursuivre la construction de l'application Microscope, vous pouvez ignorer ce chapitre en toute quiétude pour le moment et y revenir plus tard.

<% end %>

### Déploiement sur Meteor

La solution élémentaire est le déploiement sur un sous-domaine de Meteor (c-à-d. `http://myapp.meteor.com`) et c'est celle que nous allons examiner en premier lieu. Elle vous permet de présenter votre application à d'autres personnes aussitôt que possible, ou encore de monter rapidement un serveur de développement.

Le déploiement sur Meteor est plutôt simple. Ouvrez un terminal, placez-vous dans le dossier de votre application Meteor, puis saisissez:

~~~bash
$ meteor deploy myapp.meteor.com
~~~

Vous devez bien entendu remplacer "myapp" par un nom de votre choix, qui ne soit de préférence pas encore utilisé. Si le nom que vous avez choisi était déjà utilisé, Meteor vous demanderait probablement un mot de passe. Le cas échéant, annulez l'opération en pressant `ctrl+c` et essayez à nouveau avec un nom différent.

Si tout se déroule correctement, vous serez en mesure d'accéder à votre application à l'adresse `http://myapp.meteor.com` après quelques secondes.

### Protection par mot de passe

Il n'y par défaut pas de restriction sur les noms de sous-domaine Meteor. Chacun·e peut utiliser un quelconque nom de domaine, et écraser toute application existante. En conséquence vous voudrez vraisemblablement protéger votre nom de domaine avec un mot de passe, ce que vous permet l'option `-p`, comme indiqué ci-après:

~~~~bash
$ meteor deploy myapp.meteor.com -p
~~~~

Meteor vous demandera ensuite de définir un mot de passe, qui vous sera réclamé chaque fois que vous déployerez cette application spécifique à nouveau.

Vous pouvez consulter [la documentation officielle](http://docs.meteor.com/#deploying) pour en savoir davantage sur le déploiement &mdash; par exemple sur la façon d'accéder directement à la base de données de votre application hébergée, ou encore d'associer un nom de domaine spécifique à votre application.

### Déploiement sur Modulus

[Modulus](https://modulus.io/) est une excellente solution pour déployer des applications NodeJS. C'est l'un des rares prestataires PaaS (_platform-as-a-service_) offrant un support officiel de Meteor, et pas mal d'applications Meteor sont déjà en production sur cette plateforme.

<% note do %>

### Demeteorizer

Modulus a publié en open-source un outil nommé [demeteorizer](https://github.com/onmodulus/demeteorizer), qui vous permet de convertir votre application Meteor en une application NodeJS standard.

<% end %>

Commencez par [créer un compte](https://modulus.io/register). Pour déployer votre application sur Modulus, vous devez installer l'outil en ligne de commande de Modulus:

~~~bash
$ npm install -g modulus
~~~

Authentifiez-vous ensuite comme suit:

~~~bash
$ modulus login
~~~

Nous allons maintenant créer un projet Modulus &mdash; notez que vous pouvez en faire autant depuis le tableau de bord (_dashboard_) de Modulus:

~~~bash
$ modulus project create
~~~

L'étape suivante sera de créer une base de données MongoDB pour notre application. [Modulus lui-même](https://modulus.io/codex/database/getting_started) permet de le faire, tout comme [MongoHQ](https://www.mongohq.com/) ou tout autre prestataire offrant un hébergement MongoDB en ligne.

Une fois notre base de données créée, recherchez l'adresse `MONGO_URL` de celle-ci dans l'interface web de Modulus (consultez _Dashboard_ > _Databases_ > sélectionnez votre base > _Administration_), puis transcrivez-la dans la configuration de notre application:

~~~bash
$ modulus env set MONGO_URL "mongodb://<user>:<pass>@mongo.onmodulus.net:27017/<database_name>"
~~~

Ne reste plus qu'à déployer notre application. C'est aussi simple que ceci:

~~~bash
$ modulus deploy
~~~

Nous avons ainsi déployé notre application sur Modulus avec succès. Référez-vous à [la documentation de Modulus](https://modulus.io/codex/projects) pour plus de détails, notamment en ce qui concerne la consultation des journaux (_logs_), la définition d'un nom de domaine spécifique, et le chiffrage&nbsp;SSL.

### Meteor Up

Quoique de nouvelles solutions d'hébergement _cloud_ apparaissent quotidiennement, elles ont leur lot de problèmes et limitations. À ce jour, le déploiement de son propre serveur demeure la meilleure solution pour la mise en production d'une application Meteor. La contrainte étant que déployer par soi-même n'est pas si simple, en particulier si vous souhaitez un déploiement en production avec un haut standard de qualité.

[Meteor Up](https://github.com/arunoda/meteor-up) (ou `mup` pour les intimes) tente de remédier à ce problème, avec un utilitaire de ligne de commande qui prend en charge la configuration et le déploiement pour vous. Voyons donc comment déployer Microscope en utilisant Meteor Up.

Avant tout, nous aurons besoin d'un serveur sur lequel déployer. Nous vous recommandons [Digital Ocean](http://digitalocean.com/), avec une première offre à USD $5 par mois, ou encore [AWS](http://aws.amazon.com/), qui offre des instances Micro gratuitement (dont vous atteindrez rapidement les limites, mais de telles instances conviennent, si vous souhaitez simplement expérimenter Meteor Up).

Quel que soit le service que vous choisirez, il vous faut recueillir trois informations: l'adresse IP de votre serveur, un compte utilisateur (généralement `root` or `ubuntu`) et un mot de passe pour vous authentifier. Conservez-les en lieu sûr, nous en aurons besoin sous peu.

### Initialisation de Meteor Up

Pour commencer, nous allons installer Meteor Up avec `npm`, comme suit:

~~~bash
$ npm install -g mup
~~~

Nous allons ensuite créer un dossier spécial distinct, qui contiendra les paramètres d'un déploiement particulier. Nous privilégions un dossier distinct pour deux raisons: d'une part, il est préférable de ne pas placer de coordonnées d'authentification dans votre référentiel Git, notamment si vous travaillez sur une base de code publique.

D'autre part, en utilisant plusieurs dossiers distincts, nous serons en mesure de gérer plusieurs configurations Meteor Up en parallèle. Ce sera particulièrement utile pour déployer à la fois sur des instances de production et de développement. 

Créons donc ce nouveau dossier et utilisons-le pour initialiser un nouveau projet Meteor Up:

~~~bash
$ mkdir ~/microscope-deploy
$ cd ~/microscope-deploy
$ mup init
~~~

<% note do %>

### Partage avec Dropbox

Pour vous assurer que votre équipe et vous utiliserez des paramètres de déploiement identiques, une bonne façon de faire est de placer le dossier contenant les paramètres Meteor Up dans votre Dropbox, ou de tout service similaire.

<% end %>

### Configuration de Meteor Up

Lorsqu'il initialise un nouveau projet, Meteor Up créée deux fichiers pour vous: `mup.json` and `settings.json`.

Le premier, `mup.json`, contient tous les paramètres de déploiement, alors que le second, `settings.json`, contient tous les paramètres applicatifs (jetons OAuth, jetons des statistiques en ligne, etc.)

L'étape suivante sera de configurer votre fichier `mup.json`. Voici le fichier `mup.json` par défaut, généré par `mup init`, qu'il vous suffit d'ajuster:

~~~js
{
  // Authentification auprès du serveur
  "servers": [{
    "host": "nom-du-serveur",
    "username": "root",
    "password": "mot-de-passe"
    // ou fichier PEM (authentification basée sur ssh)
    //"pem": "~/.ssh/id_rsa"
  }],

  // Installer MongoDB sur le serveur
  "setupMongo": true,

  // Emplacement de l'application Meteor (répertoire local)
  "app": "/chemin/vers/application",

  // Configuration de l'environnement applicatif
  "env": {
    "ROOT_URL": "http://supersite.com"
  }
}
~~~
<%= caption "mup.json" %>

Passons en revue chacun de ces paramètres.

**Authentication auprès du serveur**

Notez que Meteor Up offre une authentification par mot de passe, ainsi qu'une authentification par clé privée (_PEM based authentication_), de sorte qu'il peut être utilisé avec à peu près n'importe quel prestataire d'hébergement _cloud_.

**Remarque importante**: si vous optez pour une authentification par mot de passe, installez `sshpass` en premier lieu ([consultez ce guide](https://gist.github.com/arunoda/7790979)).

**Configuration MongoDB**

L'étape suivante consiste à configurer la connexion de votre application à une base de données MongoDB. Nous vous recommandons d'utiliser [MongoHQ](https://www.mongohq.com/home) ou tout autre prestataire d'hébergement _cloud_ MongoDB, étant donné que tous offrent un support professionnel et de bons outils d'administration.

Si vous avez décidé d'utiliser MongoHQ, définissez le paramètre `setupMongo` à `false` et ajoutez la variable d'environnement `MONGO_URL` dans le bloc `env` du fichier `mup.json`. En revanche, si vous avez choisi de mettre en &oelig;uvre MongoDB avec Meteor Up, définissez simplement le paramètre `setupMongo` à `true` et Meteor Up se chargera du reste.

**Emplacement de l'application Meteor**

Etant donné que notre configuration Meteor Up se trouve dans un dossier distinct, nous devons ajuster la propriété `app` pour faire pointer Meteor Up vers le dossier de notre application. Définissez cette propriété avec le chemin d'accès complet, que vous obtenez en exécutant la commande `pwd` dans une fenêtre de terminal, ouverte à l'emplacement du dossier de votre application.

**Variables d'environnement**

Toutes les variables d'environnement requises par votre application (telles que `ROOT_URL`, `MAIL_URL`, `MONGO_URL`, etc.) peuvent être définies dans le bloc `env`.

### Configuration et déploiement

Avant de pouvoir déployer, il reste à configurer le serveur, afin qu'il puisse héberger des applications Meteor. Ce processus complexe révèle la magie de Meteor Up, qui le réalise en une seule commande!

~~~bash
$ mup setup
~~~

Son exécution prendra quelques minutes, selon la performance du serveur et la bande passante du réseau. Lorsqu'elle se sera terminée avec succès, nous pourrons alors déployer notre application comme suit:

~~~bash
$ mup deploy
~~~

Cette dernière commande empaquète l'application Meteor, et la déploie sur le serveur que nous venons de mettre en place.

### Afficher les journaux

Les journaux (_logs_) sont un élément important et Meteor Up donne la possibilité de les consulter en émulant la fonction `tail -f`. Saisissez simplement:

~~~bash
$ mup logs -f
~~~

Voilà pour un survol de ce qu'offre Meteor Up. Pour davantage d'information, nous vous invitons à vous référer au [référentiel GitHub de Meteor Up](https://github.com/arunoda/meteor-up).

Ces trois façons de déployer des applications Meteor devraient couvrir l'essentiel des cas d'utilisation. Bien entendu, nous savons que certains et certaines d'entre vous préférerons avoir un contrôle complet de ce processus et voudront mettre en place leur serveur du début à la fin. Mais c'est un sujet pour un jour prochain… voire pour un autre livre!
