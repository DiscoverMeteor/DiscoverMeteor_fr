---
title: Déploiement
slug: deploying
date: 0002/01/02
number: 2.5
sidebar: true
contents: Apprendre à déployer sur Meteor.com.|Apprendre à déployer sur Modulus.|Apprendre à déployer sur son propre serveur avec Meteor Up.
paragraphs: 46
---

[**NDT** Olivier réalise la traduction de ce chapitre 2.5]

Certain·e·s aiment travailler posément à un projet jusqu'à sa perfection, alors que d'autres le dévoileraient aussitôt que possible.

Si vous vous reconnaissez dans la première attitude et préférez travailler localement pour l'heure, n'hésitez pas à sauter ce chapitre. En revanche, si vous êtes disposé·e à prendre le temps de découvrir comment mettre en ligne votre application Meteor, ce chapitre est pour vous.

Nous allons découvrir différentes façons de déployer Meteor. Vous pourrez utiliser l'une ou l'autre à chaque étape de votre processus de développement, que ce soit pour Microscope ou tout autre application Meteor. C'est parti!

<% note do %>

### Présentation des _apartés_
  
Ce chapitre est un _aparté_, qui approfondit un sujet plus général de Meteor, indépendamment du reste de l'ouvrage.
  
Si vous préférez poursuivre la construction de l'application Microscope, vous pouvez ignorer ce chapitre en toute quiétude pour le moment et y revenir plus tard.

<% end %>

### Déploiement sur Meteor

La solution la plus simple est le déploiement sur un sous-domaine de Meteor (c-à-d. `http://myapp.meteor.com`) et nous allons l'essayer en premier lieu. Elle vous permet de présenter votre application à d'autres personnes dès la première heure, ou encore de monter rapidement un serveur de développement.

Le déploiement sur Meteor est plutôt simple. Ouvrez un terminal, placez-vous dans le dossier de votre application Meteor, puis saisissez:

~~~bash
$ meteor deploy myapp.meteor.com
~~~

Vous devez bien entendu remplacer "myapp" par un nom de votre choix, qui ne soit de préférence pas encore utilisé. Si le nom que vous avez choisi était déjà utilisé, Meteor vous demanderait probablement un mot de passe. Le cas échéant, annulez l'opération en pressant `ctrl+c` et essayez à nouveau avec un nom différent.

Si tout se déroule correctement, vous serez en mesure d'accéder à votre application à l'adresse `http://myapp.meteor.com` après quelques secondes.

### Protection par mot de passe

Il n'y par défaut pas de restriction sur les noms de sous-domaine Meteor. Chacun·e peut utiliser un quelconque nom de domaine, et écraser toute application existante. En conséquence vous voudrez vraisemblablement protéger votre nom de domaine avec un mot de passe, ce que vous permet l'option `-p`, comme indiqué ci-après:

~~~~bash
$ meteor deploy myapp.meteor.com -p
~~~~

Meteor vous demandera ensuite de définir un mot de passe, qui vous sera demandé chaque fois que vous voudrez déployer cette application spécifique à nouveau.

Vous pouvez consulter [la documentation officielle](http://docs.meteor.com/#deploying) pour en savoir davantage sur le déploiement, comme par exemple la façon d'accéder directement à la base de données de votre application hébergée, ou encore pour associer un nom de domaine spécifique à votre application.

### Déploiement sur Modulus

[Modulus](https://modulus.io/) est une excellente solution pour déployer des applications NodeJS. C'est l'un des rares prestataires PaaS (_platform-as-a-service_) offrant un support officiel de Meteor, et pas mal d'applications Meteor sont déjà en production sur cette plateforme.

<% note do %>

### Demeteorizer

Modulus a publié en open-source un outil nommé [demeteorizer](https://github.com/onmodulus/demeteorizer), qui vous permet de convertir votre application Meteor en une application NodeJS standard.

<% end %>

Commencez par [créer un compte](https://modulus.io/register). Pour déployer votre application sur Modulus, vous devez installer l'outil en ligne de commande de Modulus:

~~~bash
$ npm install -g modulus
~~~

Authentifiez-vous ensuite comme suit:

~~~bash
$ modulus login
~~~

Nous allons maintenant créer un projet Modulus &mdash; notez que vous pouvez en faire autant depuis le tableau de bord (_dashboard_) de Modulus:

~~~bash
$ modulus project create
~~~

L'étape suivante sera de créer une base de données MongoDB pour notre application. [Modulus lui-même](https://modulus.io/codex/database/getting_started) permet de le faire, tout comme [MongoHQ](https://www.mongohq.com/) ou tout autre prestataire offrant un hébergement MongoDB en ligne.

Une fois notre base de données créée, recherchez l'adresse `MONGO_URL` de celle-ci dans l'interface web de Modulus (consultez _Dashboard_ > _Databases_ > sélectionnez votre base > _Administration_), puis transcrivez-la dans la configuration de notre application comme suit:

~~~bash
$ modulus env set MONGO_URL "mongodb://<user>:<pass>@mongo.onmodulus.net:27017/<database_name>"
~~~

Ne reste plus qu'à déployer notre application. C'est aussi simple que ceci:

~~~bash
$ modulus deploy
~~~

Nous avons ainsi déployé notre application sur Modulus avec succès. Référez-vous à [la documentation de Modulus](https://modulus.io/codex/projects) pour davantage de détails relatifs à la consultation des _logs_, à la définition d'un nom de domaine spécifique, et au chiffrage SSL.


### Meteor Up

//// Although new cloud solutions are appearing every day, they often come with their own share of problems and limitations. So as of today, deploying on your own server remains the best way to put a Meteor application in production. The only thing is, deploying yourself is not that simple, especially if you're looking for production-quality deployment.

//// [Meteor Up](https://github.com/arunoda/meteor-up) (or `mup for short) is another attempt at fixing that issue, with a command-line utility that takes care of setup and deployment for you. So let's see how to deploy Microscope using Meteor Up.

//// Before anything else, we'll need a server to push to. We recommend either [Digital Ocean](http://digitalocean.com/), which starts at $5 per month, or [AWS](http://aws.amazon.com/), which provides Micro instances for free (you'll quickly run into scaling problems, but if you're just looking to play around with Meteor Up it should be enough).

//// Whichever service you choose, you should end up with three things: your server's IP address, a login (usually `root` or `ubuntu`), and a password. Keep those somewhere safe, we'll need them soon!

### Initializing Meteor Up

//// To start out, we'll need to install Meteor Up via `npm` as follows:

~~~bash
$ npm install -g mup
~~~

//// We'll then create a special, separate directory that will hold our Meteor Up settings for a particular deployment. We're using a separate directory for two reasons: first, it's usually best to avoid including any private credentials in your Git repo, especially if you're working on a public codebase.

//// Second, by using multiple separate directories, we'll be able to manage multiple Meteor Up configurations in parallel. This will come in handy for deploying to production and staging instances, for example.

//// So let's create this new directory and use it to initialize a new Meteor Up project:

~~~bash
$ mkdir ~/microscope-deploy
$ cd ~/microscope-deploy
$ mup init
~~~

<% note do %>

### Sharing with Dropbox

//// A great way to make sure you and your team all use the same deployment settings is to simply create your Meteor Up configuration folder inside your Dropbox, or any similar service.

<% end %>

### Meteor Up Configuration

//// When initializing a new project, Meteor Up will create two files for you: `mup.json` and `settings.json`.

//// `mup.json` will hold all our deployment-related settings, while `settings.json` will contain all app-related settings (OAuth tokens, analytics tokens, etc.).

//// The next step is to configure your mup.json file. Here is the default `mup.json` file generated by `mup init, and all you have to do is fill in the blanks:

~~~js
{
  //server authentication info
  "servers": [{
    "host": "hostname",
    "username": "root",
    "password": "password"
    //or pem file (ssh based authentication)
    //"pem": "~/.ssh/id_rsa"
  }],

  //install MongoDB in the server
  "setupMongo": true,

  //location of app (local directory)
  "app": "/path/to/the/app",

  //configure environmental
  "env": {
    "ROOT_URL": "http://supersite.com"
  }
}
~~~
<%= caption "mup.json" %>

//// Let's walk through each of these settings.

**Server Authentication**

//// You'll notice that Meteor Up supports password based and private key (PEM) based authentication, so it can be used with almost any cloud provider.

//// **Important note**: if you choose to use password-based authentication, make sure you've installed `sshpass` first ([refer to this guide](https://gist.github.com/arunoda/7790979)).

**MongoDB Configuration**

//// The next step is to configure a MongoDB database for your app. We recommend using [MongoHQ](https://www.mongohq.com/home) or any other cloud MongoDB provider, since they offer professional support and better management tools.

//// If you've decided to use MongoHQ, set `setupMongo` as `false` and add the `MONGO_URL` environmental variable in `mup.json`'s `env` block. If you decided to host MongoDB with Meteor Up, just set `setupMongo` as `true` and Meteor Up will take care of the rest.

**Meteor App Path**

//// Since our Meteor Up configuration lives in a different directory, we'll need to point Meteor Up back to our app using the `app` property. Just input your full local path, which you can get using the `pwd` command from the terminal when located inside your app's directory.

**Environment Variables**

//// You can specify all of your app's environment variables (such as `ROOT_URL`, `MAIL_URL`, `MONGO_URL`, etc.) inside the `env` block.

### Setting Up and Deploying

//// Before we can deploy, we'll need to set up the server so it's ready to host Meteor apps. The magic of Meteor Up encapsulates this complex process in a single command!

~~~bash
$ mup setup
~~~

//// This will take few minutes depending on the server's performance and the network connectivity. After the setup is successful, we can finally deploy our app with:

~~~bash
$ mup deploy
~~~

//// This will bundle the meteor app, and deploy to the server we just set up.

### Displaying Logs

//// Logs are pretty important and Meteor Up provides a very easy way to handle them by emulating the `tail -f` command. Just type:

~~~bash
$ mup logs -f
~~~

//// This wraps up our overview of what Meteor Up can do. For more infomation, we suggest visiting [Meteor Up's GitHub repository](https://github.com/arunoda/meteor-up).

//// These three ways of deploying Meteor apps should be enough for most use cases. Of course, we know some of you would prefer to be in complete control and set up their Meteor server from scratch. But that's a topic for another day… or maybe another book!
