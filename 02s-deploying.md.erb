---
title: Déploiement
slug: deploying
date: 0002/01/02
number: 2.5
sidebar: true
contents: Learn how to deploy on Meteor.com.|Learn how to deploy on Modulus.|Learn how to deploy on your own server using Meteor Up.
paragraphs: 46
---

[**NDT** Olivier a commencé la traduction de ce chapitre 2.5]

//// Some people like to work quietly on a project until it's perfect, while others can't wait to show the world as soon as possible.

//// If you're the first kind of person and would rather develop locally for now, feel free to skip this chapter. On the other hand, if you'd rather take the time to learn how to deploy your Meteor app online, we've got you covered.

//// We will be learning how to deploy an Meteor app in few different ways. Feel free to use each of them at any stage of your development process, whether you're working on Microscope or any other Meteor app. Let's get started!

<% note do %>

### Présentation des _apartés_
  
Ce chapitre est un _aparté_, qui approfondit un sujet plus général de Meteor, indépendamment du reste de l'ouvrage.
  
Si vous préférez poursuivre la construction de l'application Microscope, vous pouvez ignorer ce chapitre en toute quiétude pour le moment et y revenir plus tard.

<% end %>

### Deploying On Meteor

//// Deploying on a Meteor subdomain (i.e. `http://myapp.meteor.com`) is the easiest option, and the first one we'll to try. This can be useful to showcase your app to others in its early days, or to quickly set up a staging server.

//// Deploying on Meteor is pretty simple. Just open up your terminal, go to to your Meteor app's directory, and type:

~~~bash
$ meteor deploy myapp.meteor.com
~~~

//// Of course, you'll have to take care to replace "myapp" with a name of your choice, preferrably one that isn't already in use. If your chosen name is already in use, Meteor might prompt you for a password. If his happens, simply cancel the operation with `ctrl+c` and try again with a different name.

//// If all goes well, after a few seconds you'll be able to access your app at `http://myapp.meteor.com`.

### Password Protection

//// By default, there is no restriction on Meteor subdomains. Anyone can use any domain name of their choice, and overwrite any existing app. So you'll probably want to password protect your domain name with the `-p` option, as shown below:

~~~~bash
$ meteor deploy myapp.meteor.com -p
~~~~

//// Meteor will then ask you to set a password, and from then on this password will be required every time you want to deploy to this particular app.

//// You can refer to [the official documentation](http://docs.meteor.com/#deploying) for more information on things like accessing your hosted instance's database directly, or configuring a custom domain for your app.

### Deploying On Modulus

//// [Modulus](https://modulus.io/) is a great option for deploying NodeJS apps. It's one of the few PaaS (platform-as-a-service) provider that officially support Meteor, and there are already quite a few people running production Meteor apps on it.

<% note do %>

### Demeteorizer

//// Modulus open-sourced a tool called [demeteorizer](https://github.com/onmodulus/demeteorizer) which converts your Meteor app into a standard NodeJS app.

<% end %>

//// Start by [creating an account](https://modulus.io/register). To deploy our app on Modulus, we'll then need to install the Modulus command line tool:

~~~bash
$ npm install -g modulus
~~~

//// And then authenticate with:

~~~bash
$ modulus login
~~~

//// We'll now create a Modulus project (note that you can also do this via Modulus' web dashboard):

~~~bash
$ modulus project create
~~~

//// The next step will be creating a MongoDB database for our app. We can create a MongoDB database with [Modulus itself](https://modulus.io/codex/database/getting_started), [MongoHQ](https://www.mongohq.com/) or with any other cloud MongoDB provider.

//// Once we've created our MongoDB database, we can get the `MONGO_URL for our database from Modulus' web UI (got to Dashboard > Databases > Select your database > Administration), then use it to configure our app like so:

~~~bash
$ modulus env set MONGO_URL "mongodb://<user>:<pass>@mongo.onmodulus.net:27017/<database_name>"
~~~

//// It's now time to deploy our app. It's as simple as typing:

~~~bash
$ modulus deploy
~~~

//// We've now successfully deployed our app to Modulus. Refer to [the Modulus documentation](https://modulus.io/codex/projects) for more information about accessing logs, custom domain setup, and SSL.

### Meteor Up

//// Although new cloud solutions are appearing every day, they often come with their own share of problems and limitations. So as of today, deploying on your own server remains the best way to put a Meteor application in production. The only thing is, deploying yourself is not that simple, especially if you're looking for production-quality deployment.

//// [Meteor Up](https://github.com/arunoda/meteor-up) (or `mup for short) is another attempt at fixing that issue, with a command-line utility that takes care of setup and deployment for you. So let's see how to deploy Microscope using Meteor Up.

//// Before anything else, we'll need a server to push to. We recommend either [Digital Ocean](http://digitalocean.com/), which starts at $5 per month, or [AWS](http://aws.amazon.com/), which provides Micro instances for free (you'll quickly run into scaling problems, but if you're just looking to play around with Meteor Up it should be enough).

//// Whichever service you choose, you should end up with three things: your server's IP address, a login (usually `root` or `ubuntu`), and a password. Keep those somewhere safe, we'll need them soon!

### Initializing Meteor Up

//// To start out, we'll need to install Meteor Up via `npm` as follows:

~~~bash
$ npm install -g mup
~~~

//// We'll then create a special, separate directory that will hold our Meteor Up settings for a particular deployment. We're using a separate directory for two reasons: first, it's usually best to avoid including any private credentials in your Git repo, especially if you're working on a public codebase.

//// Second, by using multiple separate directories, we'll be able to manage multiple Meteor Up configurations in parallel. This will come in handy for deploying to production and staging instances, for example.

//// So let's create this new directory and use it to initialize a new Meteor Up project:

~~~bash
$ mkdir ~/microscope-deploy
$ cd ~/microscope-deploy
$ mup init
~~~

<% note do %>

### Sharing with Dropbox

//// A great way to make sure you and your team all use the same deployment settings is to simply create your Meteor Up configuration folder inside your Dropbox, or any similar service.

<% end %>

### Meteor Up Configuration

//// When initializing a new project, Meteor Up will create two files for you: `mup.json` and `settings.json`.

//// `mup.json` will hold all our deployment-related settings, while `settings.json` will contain all app-related settings (OAuth tokens, analytics tokens, etc.).

//// The next step is to configure your mup.json file. Here is the default `mup.json` file generated by `mup init, and all you have to do is fill in the blanks:

~~~js
{
  //server authentication info
  "servers": [{
    "host": "hostname",
    "username": "root",
    "password": "password"
    //or pem file (ssh based authentication)
    //"pem": "~/.ssh/id_rsa"
  }],

  //install MongoDB in the server
  "setupMongo": true,

  //location of app (local directory)
  "app": "/path/to/the/app",

  //configure environmental
  "env": {
    "ROOT_URL": "http://supersite.com"
  }
}
~~~
<%= caption "mup.json" %>

//// Let's walk through each of these settings.

**Server Authentication**

//// You'll notice that Meteor Up supports password based and private key (PEM) based authentication, so it can be used with almost any cloud provider.

//// **Important note**: if you choose to use password-based authentication, make sure you've installed `sshpass` first ([refer to this guide](https://gist.github.com/arunoda/7790979)).

**MongoDB Configuration**

//// The next step is to configure a MongoDB database for your app. We recommend using [MongoHQ](https://www.mongohq.com/home) or any other cloud MongoDB provider, since they offer professional support and better management tools.

//// If you've decided to use MongoHQ, set `setupMongo` as `false` and add the `MONGO_URL` environmental variable in `mup.json`'s `env` block. If you decided to host MongoDB with Meteor Up, just set `setupMongo` as `true` and Meteor Up will take care of the rest.

**Meteor App Path**

//// Since our Meteor Up configuration lives in a different directory, we'll need to point Meteor Up back to our app using the `app` property. Just input your full local path, which you can get using the `pwd` command from the terminal when located inside your app's directory.

**Environment Variables**

//// You can specify all of your app's environment variables (such as `ROOT_URL`, `MAIL_URL`, `MONGO_URL`, etc.) inside the `env` block.

### Setting Up and Deploying

//// Before we can deploy, we'll need to set up the server so it's ready to host Meteor apps. The magic of Meteor Up encapsulates this complex process in a single command!

~~~bash
$ mup setup
~~~

//// This will take few minutes depending on the server's performance and the network connectivity. After the setup is successful, we can finally deploy our app with:

~~~bash
$ mup deploy
~~~

//// This will bundle the meteor app, and deploy to the server we just set up.

### Displaying Logs

//// Logs are pretty important and Meteor Up provides a very easy way to handle them by emulating the `tail -f` command. Just type:

~~~bash
$ mup logs -f
~~~

//// This wraps up our overview of what Meteor Up can do. For more infomation, we suggest visiting [Meteor Up's GitHub repository](https://github.com/arunoda/meteor-up).

//// These three ways of deploying Meteor apps should be enough for most use cases. Of course, we know some of you would prefer to be in complete control and set up their Meteor server from scratch. But that's a topic for another day… or maybe another book!
